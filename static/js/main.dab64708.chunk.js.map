{"version":3,"sources":["factories/gameboard.js","factories/ship.js","factories/player.js","components/Square.js","components/Board.js","components/Fleet.js","components/Game.js","index.js"],"names":["Gameboard","board","Array","fill","map","fleet","validPlacement","ship","i","j","k","getLength","isHorizontal","placeShip","index","name","push","receiveAttack","find","markHit","fleetSunk","every","isSunk","Ship","shipName","length","Destroyer","Cruiser","Battleship","Carrier","body","Boolean","position","Player","playerBoard","attackTracker","turn","enemy","previousAttacks","parseInt","toString","includes","autoPlaceShip","randomCoordinates","orientation","randomOrientation","newShip","Math","random","floor","autoPlaceFleet","randomAttack","Square","props","useState","clicked","setClick","coordinateArray","coordinates","getSquareCoordinates","hitStatus","currentPlayer","boardSquare","className","onClick","gameStarted","gameEnded","handleClick","Board","boardSquares","square","key","Fleet","shipType","setShipType","setCoordinates","setOrientation","destroyer","disableDestroyer","cruiser","disableCruiser","battleship","disableBattleship","carrier","disableCarrier","submit","disableSubmit","useEffect","gameStart","handleChange","e","target","value","type","handleOrientation","checked","disabled","onChange","placeholder","preventDefault","charAt","placedShip","disableRadio","renderShips","alert","Game","setGameStart","gameEnd","setGameEnd","winner","setGameWinner","playerOne","setPlayer","computer","setComputer","setTurn","updateFleet","resetGame","playerWins","computerWins","prevCount","flat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dab64708.chunk.js","sourcesContent":["const Gameboard = () => {\n  const board = Array(10)\n    .fill(null)\n    .map(() => Array(10).fill(null));\n\n  let fleet = [];\n\n  const placeShip = (ship, i, j) => {\n    if (!validPlacement(ship, i, j)) return false;\n\n    for (let k = 0; k < ship.getLength(); k++) {\n      if (ship.isHorizontal) {\n        //k is the body part of the ship, so [0][1][2]...[k]\n        board[i][j + k] = { index: k, name: ship.name };\n      } else {\n        board[i + k][j] = { index: k, name: ship.name };\n      }\n    }\n\n    fleet.push(ship);\n    return true;\n  };\n  const receiveAttack = (i, j) => {\n    if (board[i][j] !== null && board[i][j] !== 'miss') {\n      let ship = fleet.find((ship) => ship.name === board[i][j].name);\n      ship.markHit(board[i][j].index);\n      board[i][j] = 'hit';\n    } else {\n      board[i][j] = 'miss';\n    }\n  };\n\n  const fleetSunk = () => {\n    return fleet.every((ship) => ship.isSunk());\n  };\n  const validPlacement = (ship, i, j) => {\n    //check length of ship, so like you cant go over edges\n\n    for (let k = 0; k < ship.getLength(); k++) {\n      if (ship.isHorizontal) {\n        if (k + j <= 9 && board[i][j + k] === null) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        if (k + i <= 9 && board[i + k][j] === null) {\n          continue;\n        } else {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  return { board, placeShip, receiveAttack, fleetSunk };\n};\n\nexport default Gameboard;\n","const Ship = (shipName, isHorizontal) => {\n  const shipTypes = {\n    Destroyer: 2,\n    Cruiser: 3,\n    Battleship: 4,\n    Carrier: 5,\n  };\n\n  const length = shipTypes[shipName];\n  const name = shipName;\n\n  const getLength = () => length;\n\n  //store which part of ship has been hit;\n  const body = Array(length).fill(false);\n\n  //position is coordinates?\n  const markHit = (position) => {\n    //look for position in boardPosition array then mark that index in the body as hit.\n    //example: ship is located at [[0,0] [0,1] [0,2]] , if [0,1] is hit, mark body[1] as hit\n    body[position] = true;\n    isSunk();\n  };\n\n  const isSunk = () => {\n    //if whole body array is \"hit\" return true\n    return body.every(Boolean);\n  };\n\n  return { name, body, isHorizontal, markHit, getLength, isSunk };\n};\n\nexport default Ship;\n","import Gameboard from '../factories/gameboard';\nimport Ship from '../factories/ship';\n\nconst Player = (name) => {\n  const playerBoard = Gameboard();\n  let attackTracker = [];\n\n  const turn = (enemy, i, j) => {\n    let previousAttacks = parseInt(i.toString() + j.toString()); // converts attack to coordinates\n    //checks if user already \"attacked\" a certain spot\n    if (attackTracker.includes(previousAttacks)) return;\n\n    enemy.playerBoard.receiveAttack(i, j);\n    attackTracker.push(previousAttacks);\n\n    return enemy.playerBoard.fleetSunk();\n  };\n\n  const autoPlaceFleet = () => {\n    let fleet = ['Destroyer', 'Cruiser', 'Battleship', 'Carrier'];\n\n    for (let ship of fleet) {\n      autoPlaceShip(ship);\n    }\n\n    return true;\n  };\n\n  const autoPlaceShip = (shipName) => {\n    let i = randomCoordinates();\n    let j = randomCoordinates();\n    let orientation = randomOrientation();\n    let newShip = Ship(shipName, orientation);\n    let validPlacement = playerBoard.placeShip(newShip, i, j);\n\n    if (!validPlacement) autoPlaceShip(shipName);\n  };\n\n  const randomAttack = (enemy) => {\n    let i = randomCoordinates();\n    let j = randomCoordinates();\n    return turn(enemy, i, j);\n  };\n\n  //random help methods\n  const randomOrientation = () => (Math.random() < 0.5 ? true : false);\n  const randomCoordinates = () => Math.floor(Math.random() * 10);\n\n  return { name, playerBoard, turn, autoPlaceFleet, randomAttack };\n};\n\nexport default Player;\n","import React, { useState } from 'react';\nimport './style.css';\n\nconst Square = (props) => {\n  const [clicked, setClick] = useState(false);\n\n  //coordinates starts with 0-99 corresponding to the board array,\n  //convert this to i , j format\n  const getSquareCoordinates = () => {\n    let coordinates = props.coordinates;\n    let i;\n    let j;\n    //account for cases 0-9\n    if (coordinates < 10) {\n      i = 0;\n      j = coordinates;\n    } else {\n      i = Math.floor(coordinates / 10);\n      j = coordinates % 10;\n    }\n\n    return [i, j];\n  };\n\n  let coordinateArray = getSquareCoordinates();\n  let i = coordinateArray[0];\n  let j = coordinateArray[1];\n  let hitStatus = props.currentPlayer.playerBoard.board[i][j];\n\n  let boardSquare = props.boardSquare;\n  let containerName = `squareContainer`;\n\n  const squareStatus = () => {\n    if (hitStatus === 'hit') {\n      return 'hitShip';\n    } else if (hitStatus === 'miss') {\n      return 'clickedSquare';\n    } else if (boardSquare === null) {\n      return '';\n    } else {\n      if (props.name === 'PlayerOne') return 'boardShip';\n    }\n  };\n\n  const handleAttack = () => {\n    if (!props.gameStarted || props.gameEnded) return;\n    if (boardSquare === null) boardSquare = 'miss';\n\n    if (props.name !== 'Computer' || clicked === true) return; // if you do not click player one's board return\n\n    props.handleClick(i, j);\n    setClick(true);\n  };\n\n  return (\n    <div\n      className={`${containerName} ${squareStatus()}`}\n      onClick={handleAttack}\n    >\n      {props.coordinates}\n      <div className=\"squareUnit\"></div>\n    </div>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nconst Board = (props) => {\n  const boardSquares = props.board.map((square, coordinates) => (\n    <Square\n      name={props.name}\n      key={coordinates}\n      coordinates={coordinates}\n      currentPlayer={props.currentPlayer}\n      boardSquare={square}\n      handleClick={props.handleClick}\n      gameEnded={props.gameEnded}\n      gameStarted={props.gameStarted}\n    />\n  ));\n\n  return (\n    <div className=\"boardContainer\">\n      <h1 className=\"playerName\">{props.name}</h1>\n      <div className=\"playerBoard\">{boardSquares}</div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from 'react';\nimport Ship from '../factories/ship';\n\nconst Fleet = (props) => {\n  const [shipType, setShipType] = useState('Destroyer');\n  const [coordinates, setCoordinates] = useState('');\n  const [orientation, setOrientation] = useState('Horizontal');\n  const [destroyer, disableDestroyer] = useState(false);\n  const [cruiser, disableCruiser] = useState(false);\n  const [battleship, disableBattleship] = useState(false);\n  const [carrier, disableCarrier] = useState(false);\n  const [submit, disableSubmit] = useState(false);\n\n  useEffect(() => {\n    //resets buttons when game resets\n    if (props.gameStart) {\n      disableDestroyer(false);\n      disableCruiser(false);\n      disableBattleship(false);\n      disableCarrier(false);\n      disableSubmit(false);\n    }\n  }, [props.gameStart]);\n\n  const handleChange = (e) => {\n    const { value, type } = e.target;\n\n    if (type === 'radio') {\n      disableSubmit(false);\n      setShipType(e.target.name);\n      setCoordinates('');\n    } else if (type === 'text') {\n      setCoordinates(value);\n    }\n  };\n  const handleOrientation = (e) => {\n    setOrientation(e.target.name);\n  };\n\n  const disableRadio = (shipType) => {\n    disableSubmit(true);\n    switch (shipType) {\n      case 'Destroyer':\n        disableDestroyer(true);\n        break;\n      case 'Cruiser':\n        disableCruiser(true);\n        break;\n      case 'Battleship':\n        disableBattleship(true);\n        break;\n      case 'Carrier':\n        disableCarrier(true);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let i = parseInt(coordinates.charAt(0));\n    let j = parseInt(coordinates.charAt(1));\n\n    let isHorizontal = orientation === 'Horizontal' ? true : false;\n    let newShip = Ship(shipType, isHorizontal);\n    let placedShip = props.playerBoard.placeShip(newShip, i, j);\n    setCoordinates('');\n\n    if (!placedShip) {\n      alert('Bad coordinates, try again!');\n      return;\n    }\n    disableRadio(shipType);\n    props.renderShips();\n  };\n\n  return (\n    <div className=\"gameInfo\">\n      <div className=\"formContainer\">\n        <form>\n          <h1>Customize your ships</h1>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"Destroyer\"\n              value=\"Destroyer\"\n              checked={shipType === 'Destroyer'}\n              disabled={destroyer}\n              onChange={handleChange}\n            />{' '}\n            Destroyer\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"Cruiser\"\n              value=\"Cruiser\"\n              checked={shipType === 'Cruiser'}\n              disabled={cruiser}\n              onChange={handleChange}\n            />{' '}\n            Cruiser\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"Battleship\"\n              value=\"Battleship\"\n              checked={shipType === 'Battleship'}\n              disabled={battleship}\n              onChange={handleChange}\n            />{' '}\n            Battleship\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"Carrier\"\n              value=\"Carrier\"\n              checked={shipType === 'Carrier'}\n              disabled={carrier}\n              onChange={handleChange}\n            />{' '}\n            Carrier\n          </label>\n          <input\n            name=\"coordinates\"\n            type=\"text\"\n            value={coordinates}\n            onChange={handleChange}\n            placeholder=\"Enter Coordinates, example: (56)\"\n          />\n          <label>\n            <input\n              type=\"radio\"\n              name=\"Horizontal\"\n              value=\"Horizontal\"\n              checked={orientation === 'Horizontal'}\n              onChange={handleOrientation}\n            />{' '}\n            Horizontal\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"Vertical\"\n              value=\"Vertical\"\n              checked={orientation === 'Vertical'}\n              onChange={handleOrientation}\n            />{' '}\n            Vertical\n          </label>\n          <button onClick={handleSubmit} disabled={submit}>\n            Submit\n          </button>\n        </form>\n      </div>\n      <div className=\"gameKey\">\n        <h1 className=\"redSquare\">Red square is missed</h1>\n        <h1 className=\"blueSquare\">Blue square is ship location</h1>\n        <h1 className=\"greenSquare\">Green square is hit</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default Fleet;\n","import React, { useState } from 'react';\nimport Player from '../factories/player';\nimport Board from './Board';\nimport Fleet from './Fleet';\n\nconst Game = () => {\n  const [gameStart, setGameStart] = useState(false);\n  const [gameEnd, setGameEnd] = useState(false);\n  const [winner, setGameWinner] = useState('');\n  const [playerOne, setPlayer] = useState(Player('Player'));\n  const [computer, setComputer] = useState(Player('Computer'));\n  const [turn, setTurn] = useState(playerOne);\n  const [fleet, updateFleet] = useState(0);\n\n  playerOne.enemy = computer;\n  computer.enemy = playerOne;\n\n  //everytime ship is manually input, rerender dom\n  const renderShips = () => {\n    updateFleet((prevCount) => prevCount + 1);\n  };\n  const startGame = () => {\n    //if start game is clicked again, reset\n    if (gameStart) {\n      resetGame();\n      return;\n    }\n\n    if (fleet !== 4) {\n      alert('Add all 4 ships first to start the game');\n      return;\n    } //user needs to input 4 ships to start\n\n    setGameStart(true);\n    computer.autoPlaceFleet();\n    setGameEnd(false);\n  };\n\n  const resetGame = () => {\n    setPlayer(Player(Player.name));\n    setComputer(Player(computer.name));\n    setGameEnd(false);\n    setGameStart(false);\n    setGameWinner('');\n    updateFleet(0);\n  };\n\n  const handleClick = (i, j) => {\n    if (gameEnd) return false;\n\n    const playerWins = playerOne.turn(playerOne.enemy, i, j);\n    const computerWins = computer.randomAttack(computer.enemy);\n\n    turn === playerOne ? setTurn(computer) : setTurn(playerOne); // this is just to update state every turn\n\n    if (playerWins || computerWins) {\n      setGameEnd(playerWins || computerWins);\n      setGameWinner(playerWins ? playerOne.name : computer.name);\n    }\n  };\n\n  return (\n    <div className=\"mainGame\">\n      <div className=\"gameContainer\">\n        <Fleet\n          playerBoard={playerOne.playerBoard}\n          renderShips={renderShips}\n          gameStart={gameStart}\n        />\n        <Board\n          name=\"PlayerOne\"\n          board={playerOne.playerBoard.board.flat()}\n          currentPlayer={playerOne}\n          handleClick={handleClick}\n          gameEnded={gameEnd}\n          gameStarted={gameStart}\n        />\n        <Board\n          name=\"Computer\"\n          board={computer.playerBoard.board.flat()}\n          currentPlayer={computer}\n          handleClick={handleClick}\n          gameStarted={gameStart}\n          gameEnded={gameEnd}\n        />\n      </div>\n      <div className=\"displayContainer\">\n        <button className=\"startBtn\" onClick={startGame}>\n          {gameStart ? 'Restart Game' : 'Start Game'}\n        </button>\n        <div>{gameEnd ? `The winner is ${winner}` : ''}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}