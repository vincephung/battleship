{"ast":null,"code":"var Gameboard=function Gameboard(){var board=Array(10).fill(null).map(function(){return Array(10).fill(null);});var fleet=[];var placeShip=function placeShip(ship,i,j){if(!validPlacement(ship,i,j))return false;for(var k=0;k<ship.getLength();k++){if(ship.isHorizontal){//k is the body part of the ship, so [0][1][2]...[k]\nboard[i][j+k]={index:k,name:ship.name};}else{board[i+k][j]={index:k,name:ship.name};}}fleet.push(ship);return true;};var receiveAttack=function receiveAttack(i,j){if(board[i][j]!==null&&board[i][j]!=='miss'){var ship=fleet.find(function(ship){return ship.name===board[i][j].name;});ship.markHit(board[i][j].index);board[i][j]='hit';}else{board[i][j]='miss';}};var fleetSunk=function fleetSunk(){return fleet.every(function(ship){return ship.isSunk();});};var validPlacement=function validPlacement(ship,i,j){//check length of ship, so like you cant go over edges\nfor(var k=0;k<ship.getLength();k++){if(ship.isHorizontal){if(k+j<=9&&board[i][j+k]===null){continue;}else{return false;}}else{if(k+i<=9&&board[i+k][j]===null){continue;}else{return false;}}}return true;};return{board:board,placeShip:placeShip,receiveAttack:receiveAttack,fleetSunk:fleetSunk};};export default Gameboard;","map":{"version":3,"sources":["/home/vincephung/Desktop/the_oden_project/battleship/src/factories/gameboard.js"],"names":["Gameboard","board","Array","fill","map","fleet","placeShip","ship","i","j","validPlacement","k","getLength","isHorizontal","index","name","push","receiveAttack","find","markHit","fleetSunk","every","isSunk"],"mappings":"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","sourcesContent":["const Gameboard = () => {\n  const board = Array(10)\n    .fill(null)\n    .map(() => Array(10).fill(null));\n\n  let fleet = [];\n\n  const placeShip = (ship, i, j) => {\n    if (!validPlacement(ship, i, j)) return false;\n\n    for (let k = 0; k < ship.getLength(); k++) {\n      if (ship.isHorizontal) {\n        //k is the body part of the ship, so [0][1][2]...[k]\n        board[i][j + k] = { index: k, name: ship.name };\n      } else {\n        board[i + k][j] = { index: k, name: ship.name };\n      }\n    }\n\n    fleet.push(ship);\n    return true;\n  };\n  const receiveAttack = (i, j) => {\n    if (board[i][j] !== null && board[i][j] !== 'miss') {\n      let ship = fleet.find((ship) => ship.name === board[i][j].name);\n      ship.markHit(board[i][j].index);\n      board[i][j] = 'hit';\n    } else {\n      board[i][j] = 'miss';\n    }\n  };\n\n  const fleetSunk = () => {\n    return fleet.every((ship) => ship.isSunk());\n  };\n  const validPlacement = (ship, i, j) => {\n    //check length of ship, so like you cant go over edges\n\n    for (let k = 0; k < ship.getLength(); k++) {\n      if (ship.isHorizontal) {\n        if (k + j <= 9 && board[i][j + k] === null) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        if (k + i <= 9 && board[i + k][j] === null) {\n          continue;\n        } else {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  return { board, placeShip, receiveAttack, fleetSunk };\n};\n\nexport default Gameboard;\n"]},"metadata":{},"sourceType":"module"}