{"ast":null,"code":"import Gameboard from'../factories/gameboard';import Ship from'../factories/ship';var Player=function Player(name){var playerBoard=Gameboard();var attackTracker=[];var turn=function turn(enemy,i,j){var previousAttacks=parseInt(i.toString()+j.toString());// converts attack to coordinates\n//checks if user already \"attacked\" a certain spot\nif(attackTracker.includes(previousAttacks))return;enemy.playerBoard.receiveAttack(i,j);attackTracker.push(previousAttacks);return enemy.playerBoard.fleetSunk();};var autoPlaceFleet=function autoPlaceFleet(){var fleet=['Destroyer','Cruiser','Battleship','Carrier'];for(var _i=0,_fleet=fleet;_i<_fleet.length;_i++){var ship=_fleet[_i];autoPlaceShip(ship);}return true;};var autoPlaceShip=function autoPlaceShip(shipName){var i=randomCoordinates();var j=randomCoordinates();var orientation=randomOrientation();var newShip=Ship(shipName,orientation);var validPlacement=playerBoard.placeShip(newShip,i,j);if(!validPlacement)autoPlaceShip(shipName);};var randomAttack=function randomAttack(enemy){var i=randomCoordinates();var j=randomCoordinates();return turn(enemy,i,j);};//random help methods\nvar randomOrientation=function randomOrientation(){return Math.random()<0.5?true:false;};var randomCoordinates=function randomCoordinates(){return Math.floor(Math.random()*10);};return{name:name,playerBoard:playerBoard,turn:turn,autoPlaceFleet:autoPlaceFleet,randomAttack:randomAttack};};export default Player;","map":{"version":3,"sources":["/home/vincephung/Desktop/the_oden_project/battleship/src/factories/player.js"],"names":["Gameboard","Ship","Player","name","playerBoard","attackTracker","turn","enemy","i","j","previousAttacks","parseInt","toString","includes","receiveAttack","push","fleetSunk","autoPlaceFleet","fleet","ship","autoPlaceShip","shipName","randomCoordinates","orientation","randomOrientation","newShip","validPlacement","placeShip","randomAttack","Math","random","floor"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,CAAU,CACvB,GAAMC,CAAAA,WAAW,CAAGJ,SAAS,EAA7B,CACA,GAAIK,CAAAA,aAAa,CAAG,EAApB,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAiB,CAC5B,GAAIC,CAAAA,eAAe,CAAGC,QAAQ,CAACH,CAAC,CAACI,QAAF,GAAeH,CAAC,CAACG,QAAF,EAAhB,CAA9B,CAA6D;AAC7D;AACA,GAAIP,aAAa,CAACQ,QAAd,CAAuBH,eAAvB,CAAJ,CAA6C,OAE7CH,KAAK,CAACH,WAAN,CAAkBU,aAAlB,CAAgCN,CAAhC,CAAmCC,CAAnC,EACAJ,aAAa,CAACU,IAAd,CAAmBL,eAAnB,EAEA,MAAOH,CAAAA,KAAK,CAACH,WAAN,CAAkBY,SAAlB,EAAP,CACD,CATD,CAWA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAIC,CAAAA,KAAK,CAAG,CAAC,WAAD,CAAc,SAAd,CAAyB,YAAzB,CAAuC,SAAvC,CAAZ,CAEA,oBAAiBA,KAAjB,uBAAwB,CAAnB,GAAIC,CAAAA,IAAI,WAAR,CACHC,aAAa,CAACD,IAAD,CAAb,CACD,CAED,MAAO,KAAP,CACD,CARD,CAUA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,QAAD,CAAc,CAClC,GAAIb,CAAAA,CAAC,CAAGc,iBAAiB,EAAzB,CACA,GAAIb,CAAAA,CAAC,CAAGa,iBAAiB,EAAzB,CACA,GAAIC,CAAAA,WAAW,CAAGC,iBAAiB,EAAnC,CACA,GAAIC,CAAAA,OAAO,CAAGxB,IAAI,CAACoB,QAAD,CAAWE,WAAX,CAAlB,CACA,GAAIG,CAAAA,cAAc,CAAGtB,WAAW,CAACuB,SAAZ,CAAsBF,OAAtB,CAA+BjB,CAA/B,CAAkCC,CAAlC,CAArB,CAEA,GAAI,CAACiB,cAAL,CAAqBN,aAAa,CAACC,QAAD,CAAb,CACtB,CARD,CAUA,GAAMO,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACrB,KAAD,CAAW,CAC9B,GAAIC,CAAAA,CAAC,CAAGc,iBAAiB,EAAzB,CACA,GAAIb,CAAAA,CAAC,CAAGa,iBAAiB,EAAzB,CACA,MAAOhB,CAAAA,IAAI,CAACC,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAX,CACD,CAJD,CAMA;AACA,GAAMe,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAAOK,CAAAA,IAAI,CAACC,MAAL,GAAgB,GAAhB,CAAsB,IAAtB,CAA6B,KAApC,EAA1B,CACA,GAAMR,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAAMO,CAAAA,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACC,MAAL,GAAgB,EAA3B,CAAN,EAA1B,CAEA,MAAO,CAAE3B,IAAI,CAAJA,IAAF,CAAQC,WAAW,CAAXA,WAAR,CAAqBE,IAAI,CAAJA,IAArB,CAA2BW,cAAc,CAAdA,cAA3B,CAA2CW,YAAY,CAAZA,YAA3C,CAAP,CACD,CA9CD,CAgDA,cAAe1B,CAAAA,MAAf","sourcesContent":["import Gameboard from '../factories/gameboard';\nimport Ship from '../factories/ship';\n\nconst Player = (name) => {\n  const playerBoard = Gameboard();\n  let attackTracker = [];\n\n  const turn = (enemy, i, j) => {\n    let previousAttacks = parseInt(i.toString() + j.toString()); // converts attack to coordinates\n    //checks if user already \"attacked\" a certain spot\n    if (attackTracker.includes(previousAttacks)) return;\n\n    enemy.playerBoard.receiveAttack(i, j);\n    attackTracker.push(previousAttacks);\n\n    return enemy.playerBoard.fleetSunk();\n  };\n\n  const autoPlaceFleet = () => {\n    let fleet = ['Destroyer', 'Cruiser', 'Battleship', 'Carrier'];\n\n    for (let ship of fleet) {\n      autoPlaceShip(ship);\n    }\n\n    return true;\n  };\n\n  const autoPlaceShip = (shipName) => {\n    let i = randomCoordinates();\n    let j = randomCoordinates();\n    let orientation = randomOrientation();\n    let newShip = Ship(shipName, orientation);\n    let validPlacement = playerBoard.placeShip(newShip, i, j);\n\n    if (!validPlacement) autoPlaceShip(shipName);\n  };\n\n  const randomAttack = (enemy) => {\n    let i = randomCoordinates();\n    let j = randomCoordinates();\n    return turn(enemy, i, j);\n  };\n\n  //random help methods\n  const randomOrientation = () => (Math.random() < 0.5 ? true : false);\n  const randomCoordinates = () => Math.floor(Math.random() * 10);\n\n  return { name, playerBoard, turn, autoPlaceFleet, randomAttack };\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}